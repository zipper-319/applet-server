// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: v2/applet/voiceData.proto

package applet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoiceDataOperationClient is the client API for VoiceDataOperation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoiceDataOperationClient interface {
	// 训练数据上传
	PutVoiceData(ctx context.Context, in *VoiceDataReqData, opts ...grpc.CallOption) (*VoiceDataResData, error)
	// 获取音频录制进度，返回已录制的音频数量
	GetProgress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResData, error)
	// 下载已经录制音频
	DownloadVoice(ctx context.Context, in *DownloadReqData, opts ...grpc.CallOption) (*DownloadResData, error)
	// 提交已完成录制音频
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResData, error)
	// 获取录音文本
	GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResData, error)
	UploadFiles(ctx context.Context, in *UploadFilesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type voiceDataOperationClient struct {
	cc grpc.ClientConnInterface
}

func NewVoiceDataOperationClient(cc grpc.ClientConnInterface) VoiceDataOperationClient {
	return &voiceDataOperationClient{cc}
}

func (c *voiceDataOperationClient) PutVoiceData(ctx context.Context, in *VoiceDataReqData, opts ...grpc.CallOption) (*VoiceDataResData, error) {
	out := new(VoiceDataResData)
	err := c.cc.Invoke(ctx, "/applet.v2.VoiceDataOperation/putVoiceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceDataOperationClient) GetProgress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResData, error) {
	out := new(ProgressResData)
	err := c.cc.Invoke(ctx, "/applet.v2.VoiceDataOperation/getProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceDataOperationClient) DownloadVoice(ctx context.Context, in *DownloadReqData, opts ...grpc.CallOption) (*DownloadResData, error) {
	out := new(DownloadResData)
	err := c.cc.Invoke(ctx, "/applet.v2.VoiceDataOperation/downloadVoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceDataOperationClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResData, error) {
	out := new(CommitResData)
	err := c.cc.Invoke(ctx, "/applet.v2.VoiceDataOperation/commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceDataOperationClient) GetText(ctx context.Context, in *GetTextRequest, opts ...grpc.CallOption) (*GetTextResData, error) {
	out := new(GetTextResData)
	err := c.cc.Invoke(ctx, "/applet.v2.VoiceDataOperation/getText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voiceDataOperationClient) UploadFiles(ctx context.Context, in *UploadFilesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/applet.v2.VoiceDataOperation/UploadFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoiceDataOperationServer is the server API for VoiceDataOperation service.
// All implementations must embed UnimplementedVoiceDataOperationServer
// for forward compatibility
type VoiceDataOperationServer interface {
	// 训练数据上传
	PutVoiceData(context.Context, *VoiceDataReqData) (*VoiceDataResData, error)
	// 获取音频录制进度，返回已录制的音频数量
	GetProgress(context.Context, *ProgressRequest) (*ProgressResData, error)
	// 下载已经录制音频
	DownloadVoice(context.Context, *DownloadReqData) (*DownloadResData, error)
	// 提交已完成录制音频
	Commit(context.Context, *CommitRequest) (*CommitResData, error)
	// 获取录音文本
	GetText(context.Context, *GetTextRequest) (*GetTextResData, error)
	UploadFiles(context.Context, *UploadFilesRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedVoiceDataOperationServer()
}

// UnimplementedVoiceDataOperationServer must be embedded to have forward compatible implementations.
type UnimplementedVoiceDataOperationServer struct {
}

func (UnimplementedVoiceDataOperationServer) PutVoiceData(context.Context, *VoiceDataReqData) (*VoiceDataResData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutVoiceData not implemented")
}
func (UnimplementedVoiceDataOperationServer) GetProgress(context.Context, *ProgressRequest) (*ProgressResData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgress not implemented")
}
func (UnimplementedVoiceDataOperationServer) DownloadVoice(context.Context, *DownloadReqData) (*DownloadResData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadVoice not implemented")
}
func (UnimplementedVoiceDataOperationServer) Commit(context.Context, *CommitRequest) (*CommitResData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedVoiceDataOperationServer) GetText(context.Context, *GetTextRequest) (*GetTextResData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetText not implemented")
}
func (UnimplementedVoiceDataOperationServer) UploadFiles(context.Context, *UploadFilesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFiles not implemented")
}
func (UnimplementedVoiceDataOperationServer) mustEmbedUnimplementedVoiceDataOperationServer() {}

// UnsafeVoiceDataOperationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoiceDataOperationServer will
// result in compilation errors.
type UnsafeVoiceDataOperationServer interface {
	mustEmbedUnimplementedVoiceDataOperationServer()
}

func RegisterVoiceDataOperationServer(s grpc.ServiceRegistrar, srv VoiceDataOperationServer) {
	s.RegisterService(&VoiceDataOperation_ServiceDesc, srv)
}

func _VoiceDataOperation_PutVoiceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoiceDataReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceDataOperationServer).PutVoiceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.VoiceDataOperation/putVoiceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceDataOperationServer).PutVoiceData(ctx, req.(*VoiceDataReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceDataOperation_GetProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceDataOperationServer).GetProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.VoiceDataOperation/getProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceDataOperationServer).GetProgress(ctx, req.(*ProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceDataOperation_DownloadVoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadReqData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceDataOperationServer).DownloadVoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.VoiceDataOperation/downloadVoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceDataOperationServer).DownloadVoice(ctx, req.(*DownloadReqData))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceDataOperation_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceDataOperationServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.VoiceDataOperation/commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceDataOperationServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceDataOperation_GetText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceDataOperationServer).GetText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.VoiceDataOperation/getText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceDataOperationServer).GetText(ctx, req.(*GetTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoiceDataOperation_UploadFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoiceDataOperationServer).UploadFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.VoiceDataOperation/UploadFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoiceDataOperationServer).UploadFiles(ctx, req.(*UploadFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoiceDataOperation_ServiceDesc is the grpc.ServiceDesc for VoiceDataOperation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoiceDataOperation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "applet.v2.VoiceDataOperation",
	HandlerType: (*VoiceDataOperationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "putVoiceData",
			Handler:    _VoiceDataOperation_PutVoiceData_Handler,
		},
		{
			MethodName: "getProgress",
			Handler:    _VoiceDataOperation_GetProgress_Handler,
		},
		{
			MethodName: "downloadVoice",
			Handler:    _VoiceDataOperation_DownloadVoice_Handler,
		},
		{
			MethodName: "commit",
			Handler:    _VoiceDataOperation_Commit_Handler,
		},
		{
			MethodName: "getText",
			Handler:    _VoiceDataOperation_GetText_Handler,
		},
		{
			MethodName: "UploadFiles",
			Handler:    _VoiceDataOperation_UploadFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/applet/voiceData.proto",
}
