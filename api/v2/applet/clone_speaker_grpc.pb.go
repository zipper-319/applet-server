// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: v2/applet/clone_speaker.proto

package applet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloneSpeakerClient is the client API for CloneSpeaker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloneSpeakerClient interface {
	GetCloneSpeaker(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCloneSpeakerResult, error)
	UpdateCloneSpeaker(ctx context.Context, in *UpdateCloneSpeakerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DelCloneSpeaker(ctx context.Context, in *DelCloneSpeakerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloneSpeakerClient struct {
	cc grpc.ClientConnInterface
}

func NewCloneSpeakerClient(cc grpc.ClientConnInterface) CloneSpeakerClient {
	return &cloneSpeakerClient{cc}
}

func (c *cloneSpeakerClient) GetCloneSpeaker(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCloneSpeakerResult, error) {
	out := new(GetCloneSpeakerResult)
	err := c.cc.Invoke(ctx, "/applet.v2.CloneSpeaker/GetCloneSpeaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSpeakerClient) UpdateCloneSpeaker(ctx context.Context, in *UpdateCloneSpeakerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/applet.v2.CloneSpeaker/UpdateCloneSpeaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloneSpeakerClient) DelCloneSpeaker(ctx context.Context, in *DelCloneSpeakerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/applet.v2.CloneSpeaker/DelCloneSpeaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloneSpeakerServer is the server API for CloneSpeaker service.
// All implementations must embed UnimplementedCloneSpeakerServer
// for forward compatibility
type CloneSpeakerServer interface {
	GetCloneSpeaker(context.Context, *emptypb.Empty) (*GetCloneSpeakerResult, error)
	UpdateCloneSpeaker(context.Context, *UpdateCloneSpeakerRequest) (*emptypb.Empty, error)
	DelCloneSpeaker(context.Context, *DelCloneSpeakerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloneSpeakerServer()
}

// UnimplementedCloneSpeakerServer must be embedded to have forward compatible implementations.
type UnimplementedCloneSpeakerServer struct {
}

func (UnimplementedCloneSpeakerServer) GetCloneSpeaker(context.Context, *emptypb.Empty) (*GetCloneSpeakerResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloneSpeaker not implemented")
}
func (UnimplementedCloneSpeakerServer) UpdateCloneSpeaker(context.Context, *UpdateCloneSpeakerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloneSpeaker not implemented")
}
func (UnimplementedCloneSpeakerServer) DelCloneSpeaker(context.Context, *DelCloneSpeakerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCloneSpeaker not implemented")
}
func (UnimplementedCloneSpeakerServer) mustEmbedUnimplementedCloneSpeakerServer() {}

// UnsafeCloneSpeakerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloneSpeakerServer will
// result in compilation errors.
type UnsafeCloneSpeakerServer interface {
	mustEmbedUnimplementedCloneSpeakerServer()
}

func RegisterCloneSpeakerServer(s grpc.ServiceRegistrar, srv CloneSpeakerServer) {
	s.RegisterService(&CloneSpeaker_ServiceDesc, srv)
}

func _CloneSpeaker_GetCloneSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSpeakerServer).GetCloneSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.CloneSpeaker/GetCloneSpeaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSpeakerServer).GetCloneSpeaker(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSpeaker_UpdateCloneSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloneSpeakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSpeakerServer).UpdateCloneSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.CloneSpeaker/UpdateCloneSpeaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSpeakerServer).UpdateCloneSpeaker(ctx, req.(*UpdateCloneSpeakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloneSpeaker_DelCloneSpeaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCloneSpeakerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloneSpeakerServer).DelCloneSpeaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/applet.v2.CloneSpeaker/DelCloneSpeaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloneSpeakerServer).DelCloneSpeaker(ctx, req.(*DelCloneSpeakerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloneSpeaker_ServiceDesc is the grpc.ServiceDesc for CloneSpeaker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloneSpeaker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "applet.v2.CloneSpeaker",
	HandlerType: (*CloneSpeakerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCloneSpeaker",
			Handler:    _CloneSpeaker_GetCloneSpeaker_Handler,
		},
		{
			MethodName: "UpdateCloneSpeaker",
			Handler:    _CloneSpeaker_UpdateCloneSpeaker_Handler,
		},
		{
			MethodName: "DelCloneSpeaker",
			Handler:    _CloneSpeaker_DelCloneSpeaker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v2/applet/clone_speaker.proto",
}
