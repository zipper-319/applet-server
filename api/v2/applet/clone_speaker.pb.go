// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: v2/applet/clone_speaker.proto

package applet

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetCloneSpeakerResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloneSpeakerList []*GetCloneSpeakerResult_CloneSpeaker `protobuf:"bytes,1,rep,name=clone_speaker_list,proto3" json:"clone_speaker_list"`
	TrainTime        int32                                 `protobuf:"varint,2,opt,name=train_time,proto3" json:"train_time"`
}

func (x *GetCloneSpeakerResult) Reset() {
	*x = GetCloneSpeakerResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_applet_clone_speaker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloneSpeakerResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloneSpeakerResult) ProtoMessage() {}

func (x *GetCloneSpeakerResult) ProtoReflect() protoreflect.Message {
	mi := &file_v2_applet_clone_speaker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloneSpeakerResult.ProtoReflect.Descriptor instead.
func (*GetCloneSpeakerResult) Descriptor() ([]byte, []int) {
	return file_v2_applet_clone_speaker_proto_rawDescGZIP(), []int{0}
}

func (x *GetCloneSpeakerResult) GetCloneSpeakerList() []*GetCloneSpeakerResult_CloneSpeaker {
	if x != nil {
		return x.CloneSpeakerList
	}
	return nil
}

func (x *GetCloneSpeakerResult) GetTrainTime() int32 {
	if x != nil {
		return x.TrainTime
	}
	return 0
}

type UpdateCloneSpeakerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SpeakerName string `protobuf:"bytes,2,opt,name=speaker_name,proto3" json:"speaker_name"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description"`
}

func (x *UpdateCloneSpeakerRequest) Reset() {
	*x = UpdateCloneSpeakerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_applet_clone_speaker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloneSpeakerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloneSpeakerRequest) ProtoMessage() {}

func (x *UpdateCloneSpeakerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_applet_clone_speaker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloneSpeakerRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloneSpeakerRequest) Descriptor() ([]byte, []int) {
	return file_v2_applet_clone_speaker_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCloneSpeakerRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCloneSpeakerRequest) GetSpeakerName() string {
	if x != nil {
		return x.SpeakerName
	}
	return ""
}

func (x *UpdateCloneSpeakerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DelCloneSpeakerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
}

func (x *DelCloneSpeakerRequest) Reset() {
	*x = DelCloneSpeakerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_applet_clone_speaker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelCloneSpeakerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelCloneSpeakerRequest) ProtoMessage() {}

func (x *DelCloneSpeakerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v2_applet_clone_speaker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelCloneSpeakerRequest.ProtoReflect.Descriptor instead.
func (*DelCloneSpeakerRequest) Descriptor() ([]byte, []int) {
	return file_v2_applet_clone_speaker_proto_rawDescGZIP(), []int{2}
}

func (x *DelCloneSpeakerRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCloneSpeakerResult_CloneSpeaker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	SpeakerName       string `protobuf:"bytes,2,opt,name=speaker_name,proto3" json:"speaker_name"`
	CommitSpeakerName string `protobuf:"bytes,3,opt,name=commit_speaker_name,proto3" json:"commit_speaker_name"`
	IsFinish          bool   `protobuf:"varint,4,opt,name=is_finish,proto3" json:"is_finish"`
	Description       string `protobuf:"bytes,5,opt,name=description,proto3" json:"description"`
	CreateTime        int64  `protobuf:"varint,6,opt,name=create_time,proto3" json:"create_time"`
	UpdateTime        int64  `protobuf:"varint,7,opt,name=update_time,proto3" json:"update_time"`
}

func (x *GetCloneSpeakerResult_CloneSpeaker) Reset() {
	*x = GetCloneSpeakerResult_CloneSpeaker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v2_applet_clone_speaker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloneSpeakerResult_CloneSpeaker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloneSpeakerResult_CloneSpeaker) ProtoMessage() {}

func (x *GetCloneSpeakerResult_CloneSpeaker) ProtoReflect() protoreflect.Message {
	mi := &file_v2_applet_clone_speaker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloneSpeakerResult_CloneSpeaker.ProtoReflect.Descriptor instead.
func (*GetCloneSpeakerResult_CloneSpeaker) Descriptor() ([]byte, []int) {
	return file_v2_applet_clone_speaker_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GetCloneSpeakerResult_CloneSpeaker) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetCloneSpeakerResult_CloneSpeaker) GetSpeakerName() string {
	if x != nil {
		return x.SpeakerName
	}
	return ""
}

func (x *GetCloneSpeakerResult_CloneSpeaker) GetCommitSpeakerName() string {
	if x != nil {
		return x.CommitSpeakerName
	}
	return ""
}

func (x *GetCloneSpeakerResult_CloneSpeaker) GetIsFinish() bool {
	if x != nil {
		return x.IsFinish
	}
	return false
}

func (x *GetCloneSpeakerResult_CloneSpeaker) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetCloneSpeakerResult_CloneSpeaker) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *GetCloneSpeakerResult_CloneSpeaker) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

var File_v2_applet_clone_speaker_proto protoreflect.FileDescriptor

var file_v2_applet_clone_speaker_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x09, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x72, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x91, 0x03, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a, 0x12,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65,
	0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x12, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x5f, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0xf8, 0x01, 0x0a, 0x0c,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x32, 0x87, 0x04, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65,
	0x61, 0x6b, 0x65, 0x72, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x92, 0x41, 0x2d, 0x12, 0x11, 0x67,
	0x65, 0x74, 0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x1a, 0x18, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe5, 0x85, 0x8b, 0xe9, 0x9a, 0x86, 0xe4, 0xba,
	0xba, 0xe5, 0x8f, 0x91, 0xe9, 0x9f, 0xb3, 0xe4, 0xba, 0xba, 0x12, 0xab, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2d, 0x12, 0x14, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2d, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x1a, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe5, 0x85, 0x8b, 0xe9, 0x9a, 0x86, 0xe5,
	0x8f, 0x91, 0xe9, 0x9f, 0xb3, 0xe4, 0xba, 0xba, 0x12, 0xa2, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61,
	0x70, 0x70, 0x6c, 0x65, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x54, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2d, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x6c, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2d,
	0x12, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2d, 0x73,
	0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x1a, 0x15, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe5, 0x85,
	0x8b, 0xe9, 0x9a, 0x86, 0xe5, 0x8f, 0x91, 0xe9, 0x9f, 0xb3, 0xe4, 0xba, 0xba, 0x42, 0x1d, 0x5a,
	0x1b, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v2_applet_clone_speaker_proto_rawDescOnce sync.Once
	file_v2_applet_clone_speaker_proto_rawDescData = file_v2_applet_clone_speaker_proto_rawDesc
)

func file_v2_applet_clone_speaker_proto_rawDescGZIP() []byte {
	file_v2_applet_clone_speaker_proto_rawDescOnce.Do(func() {
		file_v2_applet_clone_speaker_proto_rawDescData = protoimpl.X.CompressGZIP(file_v2_applet_clone_speaker_proto_rawDescData)
	})
	return file_v2_applet_clone_speaker_proto_rawDescData
}

var file_v2_applet_clone_speaker_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_v2_applet_clone_speaker_proto_goTypes = []interface{}{
	(*GetCloneSpeakerResult)(nil),              // 0: applet.v2.GetCloneSpeakerResult
	(*UpdateCloneSpeakerRequest)(nil),          // 1: applet.v2.UpdateCloneSpeakerRequest
	(*DelCloneSpeakerRequest)(nil),             // 2: applet.v2.DelCloneSpeakerRequest
	(*GetCloneSpeakerResult_CloneSpeaker)(nil), // 3: applet.v2.GetCloneSpeakerResult.CloneSpeaker
	(*emptypb.Empty)(nil),                      // 4: google.protobuf.Empty
}
var file_v2_applet_clone_speaker_proto_depIdxs = []int32{
	3, // 0: applet.v2.GetCloneSpeakerResult.clone_speaker_list:type_name -> applet.v2.GetCloneSpeakerResult.CloneSpeaker
	4, // 1: applet.v2.CloneSpeaker.GetCloneSpeaker:input_type -> google.protobuf.Empty
	1, // 2: applet.v2.CloneSpeaker.UpdateCloneSpeaker:input_type -> applet.v2.UpdateCloneSpeakerRequest
	2, // 3: applet.v2.CloneSpeaker.DelCloneSpeaker:input_type -> applet.v2.DelCloneSpeakerRequest
	0, // 4: applet.v2.CloneSpeaker.GetCloneSpeaker:output_type -> applet.v2.GetCloneSpeakerResult
	4, // 5: applet.v2.CloneSpeaker.UpdateCloneSpeaker:output_type -> google.protobuf.Empty
	4, // 6: applet.v2.CloneSpeaker.DelCloneSpeaker:output_type -> google.protobuf.Empty
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_v2_applet_clone_speaker_proto_init() }
func file_v2_applet_clone_speaker_proto_init() {
	if File_v2_applet_clone_speaker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v2_applet_clone_speaker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloneSpeakerResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_applet_clone_speaker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloneSpeakerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_applet_clone_speaker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelCloneSpeakerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v2_applet_clone_speaker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloneSpeakerResult_CloneSpeaker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v2_applet_clone_speaker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v2_applet_clone_speaker_proto_goTypes,
		DependencyIndexes: file_v2_applet_clone_speaker_proto_depIdxs,
		MessageInfos:      file_v2_applet_clone_speaker_proto_msgTypes,
	}.Build()
	File_v2_applet_clone_speaker_proto = out.File
	file_v2_applet_clone_speaker_proto_rawDesc = nil
	file_v2_applet_clone_speaker_proto_goTypes = nil
	file_v2_applet_clone_speaker_proto_depIdxs = nil
}
