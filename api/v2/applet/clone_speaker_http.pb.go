// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.6.1
// source: v2/applet/clone_speaker.proto

package applet

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCloneSpeakerDelCloneSpeaker = "/applet.v2.CloneSpeaker/DelCloneSpeaker"
const OperationCloneSpeakerGetCloneSpeaker = "/applet.v2.CloneSpeaker/GetCloneSpeaker"
const OperationCloneSpeakerUpdateCloneSpeaker = "/applet.v2.CloneSpeaker/UpdateCloneSpeaker"

type CloneSpeakerHTTPServer interface {
	DelCloneSpeaker(context.Context, *DelCloneSpeakerRequest) (*emptypb.Empty, error)
	GetCloneSpeaker(context.Context, *emptypb.Empty) (*GetCloneSpeakerResult, error)
	UpdateCloneSpeaker(context.Context, *UpdateCloneSpeakerRequest) (*emptypb.Empty, error)
}

func RegisterCloneSpeakerHTTPServer(s *http.Server, srv CloneSpeakerHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v2/clone-speaker/get-list", _CloneSpeaker_GetCloneSpeaker0_HTTP_Handler(srv))
	r.POST("/api/v2/clone-speaker/update", _CloneSpeaker_UpdateCloneSpeaker0_HTTP_Handler(srv))
	r.POST("/api/v2/clone-speaker/del", _CloneSpeaker_DelCloneSpeaker0_HTTP_Handler(srv))
}

func _CloneSpeaker_GetCloneSpeaker0_HTTP_Handler(srv CloneSpeakerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in emptypb.Empty
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSpeakerGetCloneSpeaker)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCloneSpeaker(ctx, req.(*emptypb.Empty))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCloneSpeakerResult)
		return ctx.Result(200, reply)
	}
}

func _CloneSpeaker_UpdateCloneSpeaker0_HTTP_Handler(srv CloneSpeakerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateCloneSpeakerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSpeakerUpdateCloneSpeaker)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateCloneSpeaker(ctx, req.(*UpdateCloneSpeakerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _CloneSpeaker_DelCloneSpeaker0_HTTP_Handler(srv CloneSpeakerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DelCloneSpeakerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCloneSpeakerDelCloneSpeaker)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DelCloneSpeaker(ctx, req.(*DelCloneSpeakerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type CloneSpeakerHTTPClient interface {
	DelCloneSpeaker(ctx context.Context, req *DelCloneSpeakerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetCloneSpeaker(ctx context.Context, req *emptypb.Empty, opts ...http.CallOption) (rsp *GetCloneSpeakerResult, err error)
	UpdateCloneSpeaker(ctx context.Context, req *UpdateCloneSpeakerRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type CloneSpeakerHTTPClientImpl struct {
	cc *http.Client
}

func NewCloneSpeakerHTTPClient(client *http.Client) CloneSpeakerHTTPClient {
	return &CloneSpeakerHTTPClientImpl{client}
}

func (c *CloneSpeakerHTTPClientImpl) DelCloneSpeaker(ctx context.Context, in *DelCloneSpeakerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v2/clone-speaker/del"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSpeakerDelCloneSpeaker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloneSpeakerHTTPClientImpl) GetCloneSpeaker(ctx context.Context, in *emptypb.Empty, opts ...http.CallOption) (*GetCloneSpeakerResult, error) {
	var out GetCloneSpeakerResult
	pattern := "/api/v2/clone-speaker/get-list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCloneSpeakerGetCloneSpeaker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *CloneSpeakerHTTPClientImpl) UpdateCloneSpeaker(ctx context.Context, in *UpdateCloneSpeakerRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/v2/clone-speaker/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCloneSpeakerUpdateCloneSpeaker))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
