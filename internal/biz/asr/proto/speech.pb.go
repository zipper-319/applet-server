// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: proto/speech.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AsrsLang int32

const (
	AsrsLang_LANG_KEEP    AsrsLang = 0
	AsrsLang_LANG_CH      AsrsLang = 1 //china
	AsrsLang_LANG_EN      AsrsLang = 2 //english
	AsrsLang_LANG_SICHUAN AsrsLang = 3 //sichuan hua
	AsrsLang_LANG_YUEYU   AsrsLang = 4 //yue yu
)

// Enum value maps for AsrsLang.
var (
	AsrsLang_name = map[int32]string{
		0: "LANG_KEEP",
		1: "LANG_CH",
		2: "LANG_EN",
		3: "LANG_SICHUAN",
		4: "LANG_YUEYU",
	}
	AsrsLang_value = map[string]int32{
		"LANG_KEEP":    0,
		"LANG_CH":      1,
		"LANG_EN":      2,
		"LANG_SICHUAN": 3,
		"LANG_YUEYU":   4,
	}
)

func (x AsrsLang) Enum() *AsrsLang {
	p := new(AsrsLang)
	*p = x
	return p
}

func (x AsrsLang) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AsrsLang) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_speech_proto_enumTypes[0].Descriptor()
}

func (AsrsLang) Type() protoreflect.EnumType {
	return &file_proto_speech_proto_enumTypes[0]
}

func (x AsrsLang) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AsrsLang.Descriptor instead.
func (AsrsLang) EnumDescriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{0}
}

// `NullValue` is a singleton enumeration to represent the null value for the
// `Value` type union.
//
//  The JSON representation for `NullValue` is JSON `null`.
type NullValue int32

const (
	// Null value.
	NullValue_NULL_VALUE NullValue = 0
)

// Enum value maps for NullValue.
var (
	NullValue_name = map[int32]string{
		0: "NULL_VALUE",
	}
	NullValue_value = map[string]int32{
		"NULL_VALUE": 0,
	}
)

func (x NullValue) Enum() *NullValue {
	p := new(NullValue)
	*p = x
	return p
}

func (x NullValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NullValue) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_speech_proto_enumTypes[1].Descriptor()
}

func (NullValue) Type() protoreflect.EnumType {
	return &file_proto_speech_proto_enumTypes[1]
}

func (x NullValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NullValue.Descriptor instead.
func (NullValue) EnumDescriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{1}
}

type Body_Type int32

const (
	Body_BLOCK     Body_Type = 0
	Body_STREAMING Body_Type = 1
)

// Enum value maps for Body_Type.
var (
	Body_Type_name = map[int32]string{
		0: "BLOCK",
		1: "STREAMING",
	}
	Body_Type_value = map[string]int32{
		"BLOCK":     0,
		"STREAMING": 1,
	}
)

func (x Body_Type) Enum() *Body_Type {
	p := new(Body_Type)
	*p = x
	return p
}

func (x Body_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Body_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_speech_proto_enumTypes[2].Descriptor()
}

func (Body_Type) Type() protoreflect.EnumType {
	return &file_proto_speech_proto_enumTypes[2]
}

func (x Body_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Body_Type.Descriptor instead.
func (Body_Type) EnumDescriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{0, 0}
}

type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       Body_Type         `protobuf:"varint,9,opt,name=type,proto3,enum=skill.asr.Body_Type" json:"type,omitempty"` // may need different definition to detect BLOCK or STREAMING
	Sid        string            `protobuf:"bytes,10,opt,name=sid,proto3" json:"sid,omitempty"`
	AppType    string            `protobuf:"bytes,11,opt,name=app_type,json=appType,proto3" json:"app_type,omitempty"`
	Tag        string            `protobuf:"bytes,12,opt,name=tag,proto3" json:"tag,omitempty"`
	StreamFlag int32             `protobuf:"varint,13,opt,name=stream_flag,json=streamFlag,proto3" json:"stream_flag,omitempty"`
	Option     map[string]string `protobuf:"bytes,14,rep,name=option,proto3" json:"option,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // keys contains recognizedText=something, will not call vendor platform and use something as asr result
	// keys contains recognizeOnly=anything, will not call service app any more
	// keys contains returnDetail=anything, will return a more key named "detailMessage" in the return value
	Data       *Body_Data `protobuf:"bytes,15,opt,name=data,proto3" json:"data,omitempty"`
	NeedWakeup bool       `protobuf:"varint,16,opt,name=need_wakeup,json=needWakeup,proto3" json:"need_wakeup,omitempty"` // true: need to wake up; false: needn't wake up
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{0}
}

func (x *Body) GetType() Body_Type {
	if x != nil {
		return x.Type
	}
	return Body_BLOCK
}

func (x *Body) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *Body) GetAppType() string {
	if x != nil {
		return x.AppType
	}
	return ""
}

func (x *Body) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Body) GetStreamFlag() int32 {
	if x != nil {
		return x.StreamFlag
	}
	return 0
}

func (x *Body) GetOption() map[string]string {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *Body) GetData() *Body_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Body) GetNeedWakeup() bool {
	if x != nil {
		return x.NeedWakeup
	}
	return false
}

type RecognitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonReqInfo *CommonReqInfo `protobuf:"bytes,1,opt,name=common_req_info,json=commonReqInfo,proto3" json:"common_req_info,omitempty"`
	Body          *Body          `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Extra         *Extra         `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *RecognitionRequest) Reset() {
	*x = RecognitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionRequest) ProtoMessage() {}

func (x *RecognitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionRequest.ProtoReflect.Descriptor instead.
func (*RecognitionRequest) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{1}
}

func (x *RecognitionRequest) GetCommonReqInfo() *CommonReqInfo {
	if x != nil {
		return x.CommonReqInfo
	}
	return nil
}

func (x *RecognitionRequest) GetBody() *Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *RecognitionRequest) GetExtra() *Extra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type RecognitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonRspInfo *CommonRspInfo `protobuf:"bytes,1,opt,name=common_rsp_info,json=commonRspInfo,proto3" json:"common_rsp_info,omitempty"`
	DetailMessage *Struct        `protobuf:"bytes,2,opt,name=detail_message,json=detailMessage,proto3" json:"detail_message,omitempty"`
	IsNoise       bool           `protobuf:"varint,3,opt,name=is_noise,json=isNoise,proto3" json:"is_noise,omitempty"`         // true if asr result is empty
	QuestionId    string         `protobuf:"bytes,4,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"` // audio url format by date_questionId.wav
	IsWakeup      bool           `protobuf:"varint,5,opt,name=is_wakeup,json=isWakeup,proto3" json:"is_wakeup,omitempty"`      // true: wakeup success ; false: needn't wakup or wake up fail
}

func (x *RecognitionResponse) Reset() {
	*x = RecognitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecognitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecognitionResponse) ProtoMessage() {}

func (x *RecognitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecognitionResponse.ProtoReflect.Descriptor instead.
func (*RecognitionResponse) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{2}
}

func (x *RecognitionResponse) GetCommonRspInfo() *CommonRspInfo {
	if x != nil {
		return x.CommonRspInfo
	}
	return nil
}

func (x *RecognitionResponse) GetDetailMessage() *Struct {
	if x != nil {
		return x.DetailMessage
	}
	return nil
}

func (x *RecognitionResponse) GetIsNoise() bool {
	if x != nil {
		return x.IsNoise
	}
	return false
}

func (x *RecognitionResponse) GetQuestionId() string {
	if x != nil {
		return x.QuestionId
	}
	return ""
}

func (x *RecognitionResponse) GetIsWakeup() bool {
	if x != nil {
		return x.IsWakeup
	}
	return false
}

type CheckCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Status int32  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"` //0 cpu start,1 cpu end
	CmdDsc string `protobuf:"bytes,3,opt,name=cmdDsc,proto3" json:"cmdDsc,omitempty"`  //return dsc
}

func (x *CheckCmd) Reset() {
	*x = CheckCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCmd) ProtoMessage() {}

func (x *CheckCmd) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCmd.ProtoReflect.Descriptor instead.
func (*CheckCmd) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{3}
}

func (x *CheckCmd) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *CheckCmd) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CheckCmd) GetCmdDsc() string {
	if x != nil {
		return x.CmdDsc
	}
	return ""
}

type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unordered map of dynamically typed values.
	Fields map[string]*Value `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{4}
}

func (x *Struct) GetFields() map[string]*Value {
	if x != nil {
		return x.Fields
	}
	return nil
}

type CommonReqInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Guid        string `protobuf:"bytes,1,opt,name=guid,proto3" json:"guid,omitempty"`
	Timestamp   int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	TenantId    string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	UserId      string `protobuf:"bytes,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RobotId     string `protobuf:"bytes,6,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"`
	RobotType   string `protobuf:"bytes,7,opt,name=robot_type,json=robotType,proto3" json:"robot_type,omitempty"`
	ServiceCode string `protobuf:"bytes,8,opt,name=service_code,json=serviceCode,proto3" json:"service_code,omitempty"`
	Seq         string `protobuf:"bytes,9,opt,name=seq,proto3" json:"seq,omitempty"`
	RootGuid    string `protobuf:"bytes,10,opt,name=root_guid,json=rootGuid,proto3" json:"root_guid,omitempty"`
}

func (x *CommonReqInfo) Reset() {
	*x = CommonReqInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonReqInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonReqInfo) ProtoMessage() {}

func (x *CommonReqInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonReqInfo.ProtoReflect.Descriptor instead.
func (*CommonReqInfo) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{5}
}

func (x *CommonReqInfo) GetGuid() string {
	if x != nil {
		return x.Guid
	}
	return ""
}

func (x *CommonReqInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *CommonReqInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CommonReqInfo) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CommonReqInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CommonReqInfo) GetRobotId() string {
	if x != nil {
		return x.RobotId
	}
	return ""
}

func (x *CommonReqInfo) GetRobotType() string {
	if x != nil {
		return x.RobotType
	}
	return ""
}

func (x *CommonReqInfo) GetServiceCode() string {
	if x != nil {
		return x.ServiceCode
	}
	return ""
}

func (x *CommonReqInfo) GetSeq() string {
	if x != nil {
		return x.Seq
	}
	return ""
}

func (x *CommonReqInfo) GetRootGuid() string {
	if x != nil {
		return x.RootGuid
	}
	return ""
}

type CommonRspInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrCode   int32  `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3" json:"err_code,omitempty"`
	ErrMsg    string `protobuf:"bytes,2,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	ErrDetail string `protobuf:"bytes,3,opt,name=err_detail,json=errDetail,proto3" json:"err_detail,omitempty"`
}

func (x *CommonRspInfo) Reset() {
	*x = CommonRspInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonRspInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonRspInfo) ProtoMessage() {}

func (x *CommonRspInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonRspInfo.ProtoReflect.Descriptor instead.
func (*CommonRspInfo) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{6}
}

func (x *CommonRspInfo) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *CommonRspInfo) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *CommonRspInfo) GetErrDetail() string {
	if x != nil {
		return x.ErrDetail
	}
	return ""
}

type Extra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExtraType string `protobuf:"bytes,1,opt,name=extra_type,json=extraType,proto3" json:"extra_type,omitempty"`
	ExtraBody string `protobuf:"bytes,2,opt,name=extra_body,json=extraBody,proto3" json:"extra_body,omitempty"`
}

func (x *Extra) Reset() {
	*x = Extra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extra) ProtoMessage() {}

func (x *Extra) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extra.ProtoReflect.Descriptor instead.
func (*Extra) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{7}
}

func (x *Extra) GetExtraType() string {
	if x != nil {
		return x.ExtraType
	}
	return ""
}

func (x *Extra) GetExtraBody() string {
	if x != nil {
		return x.ExtraBody
	}
	return ""
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of value.
	//
	// Types that are assignable to Kind:
	//	*Value_NullValue
	//	*Value_NumberValue
	//	*Value_StringValue
	//	*Value_BoolValue
	//	*Value_StructValue
	//	*Value_ListValue
	Kind isValue_Kind `protobuf_oneof:"kind"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{8}
}

func (m *Value) GetKind() isValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *Value) GetNullValue() NullValue {
	if x, ok := x.GetKind().(*Value_NullValue); ok {
		return x.NullValue
	}
	return NullValue_NULL_VALUE
}

func (x *Value) GetNumberValue() float64 {
	if x, ok := x.GetKind().(*Value_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetKind().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetBoolValue() bool {
	if x, ok := x.GetKind().(*Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Value) GetStructValue() *Struct {
	if x, ok := x.GetKind().(*Value_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (x *Value) GetListValue() *ListValue {
	if x, ok := x.GetKind().(*Value_ListValue); ok {
		return x.ListValue
	}
	return nil
}

type isValue_Kind interface {
	isValue_Kind()
}

type Value_NullValue struct {
	// Represents a null value.
	NullValue NullValue `protobuf:"varint,1,opt,name=null_value,json=nullValue,proto3,enum=skill.asr.NullValue,oneof"`
}

type Value_NumberValue struct {
	// Represents a double value.
	NumberValue float64 `protobuf:"fixed64,2,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type Value_StringValue struct {
	// Represents a string value.
	StringValue string `protobuf:"bytes,3,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_BoolValue struct {
	// Represents a boolean value.
	BoolValue bool `protobuf:"varint,4,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Value_StructValue struct {
	// Represents a structured value.
	StructValue *Struct `protobuf:"bytes,5,opt,name=struct_value,json=structValue,proto3,oneof"`
}

type Value_ListValue struct {
	// Represents a repeated `Value`.
	ListValue *ListValue `protobuf:"bytes,6,opt,name=list_value,json=listValue,proto3,oneof"`
}

func (*Value_NullValue) isValue_Kind() {}

func (*Value_NumberValue) isValue_Kind() {}

func (*Value_StringValue) isValue_Kind() {}

func (*Value_BoolValue) isValue_Kind() {}

func (*Value_StructValue) isValue_Kind() {}

func (*Value_ListValue) isValue_Kind() {}

// `ListValue` is a wrapper around a repeated field of values.
//
// The JSON representation for `ListValue` is JSON array.
type ListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated field of dynamically typed values.
	Values []*Value `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListValue) Reset() {
	*x = ListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListValue) ProtoMessage() {}

func (x *ListValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListValue.ProtoReflect.Descriptor instead.
func (*ListValue) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{9}
}

func (x *ListValue) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

type Body_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate     int32  `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty"`        // means sampling-rate always 16000
	Format   string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`     // only pcm
	Account  string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`   // user id
	Language string `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"` // CH EN TCH JA ES
	Dialect  string `protobuf:"bytes,5,opt,name=dialect,proto3" json:"dialect,omitempty"`   // when vendor=Google then "https://cloud.google.com/speech-to-text/docs/languages" for column "languageCode"
	// when vendor=Baidu then "http://ai.baidu.com/docs#/ASR-Online-Java-SDK/top" for section "dev_pid 参数列表"
	// when vendor=IFlyTek then "https://doc.xfyun.cn/rest_api/%E8%AF%AD%E9%9F%B3%E5%90%AC%E5%86%99.html" for section "6.1.2. 业务参数" "engine_type"
	Vendor     string   `protobuf:"bytes,6,opt,name=vendor,proto3" json:"vendor,omitempty"` // Google Baidu IFlyTek
	Channel    int32    `protobuf:"varint,7,opt,name=channel,proto3" json:"channel,omitempty"`
	Duration   int32    `protobuf:"varint,8,opt,name=duration,proto3" json:"duration,omitempty"`
	Flag       int32    `protobuf:"varint,9,opt,name=flag,proto3" json:"flag,omitempty"`
	Speech     []byte   `protobuf:"bytes,10,opt,name=speech,json=-,proto3" json:"speech,omitempty"`
	MulAsrLang AsrsLang `protobuf:"varint,11,opt,name=mulAsrLang,proto3,enum=skill.asr.AsrsLang" json:"mulAsrLang,omitempty"` //asrs lang set,over 0 is meanning
}

func (x *Body_Data) Reset() {
	*x = Body_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_speech_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body_Data) ProtoMessage() {}

func (x *Body_Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_speech_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body_Data.ProtoReflect.Descriptor instead.
func (*Body_Data) Descriptor() ([]byte, []int) {
	return file_proto_speech_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Body_Data) GetRate() int32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Body_Data) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *Body_Data) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Body_Data) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Body_Data) GetDialect() string {
	if x != nil {
		return x.Dialect
	}
	return ""
}

func (x *Body_Data) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Body_Data) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *Body_Data) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Body_Data) GetFlag() int32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

func (x *Body_Data) GetSpeech() []byte {
	if x != nil {
		return x.Speech
	}
	return nil
}

func (x *Body_Data) GetMulAsrLang() AsrsLang {
	if x != nil {
		return x.MulAsrLang
	}
	return AsrsLang_LANG_KEEP
}

var File_proto_speech_proto protoreflect.FileDescriptor

var file_proto_speech_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x22,
	0x9c, 0x05, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61,
	0x73, 0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61,
	0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x66, 0x6c, 0x61, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x6c,
	0x61, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73,
	0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x75, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x57, 0x61, 0x6b, 0x65,
	0x75, 0x70, 0x1a, 0x39, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xac, 0x02,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x12, 0x11, 0x0a, 0x06, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x2d, 0x12, 0x33, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x41, 0x73,
	0x72, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x41, 0x73, 0x72, 0x73, 0x4c, 0x61, 0x6e, 0x67,
	0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x41, 0x73, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x22, 0x20, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x22, 0xa3,
	0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73,
	0x72, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x26, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x22, 0xea, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x73, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73,
	0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38,
	0x0a, 0x0e, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61,
	0x73, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6e,
	0x6f, 0x69, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x4e, 0x6f,
	0x69, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x6b, 0x65, 0x75,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x57, 0x61, 0x6b, 0x65, 0x75,
	0x70, 0x22, 0x52, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6d, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6d, 0x64, 0x44, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6d, 0x64, 0x44, 0x73, 0x63, 0x22, 0x8c, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4b, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e,
	0x61, 0x73, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x67, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x47, 0x75, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x73,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x45, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x42, 0x6f, 0x64, 0x79, 0x22,
	0xa0, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6e, 0x75, 0x6c,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e,
	0x61, 0x73, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0x35, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x55, 0x0a, 0x08, 0x41, 0x73, 0x72,
	0x73, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x4e, 0x47, 0x5f, 0x4b, 0x45,
	0x45, 0x50, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x41, 0x4e, 0x47, 0x5f, 0x43, 0x48, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x41, 0x4e, 0x47, 0x5f, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x41, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x43, 0x48, 0x55, 0x41, 0x4e, 0x10, 0x03,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x4e, 0x47, 0x5f, 0x59, 0x55, 0x45, 0x59, 0x55, 0x10, 0x04,
	0x2a, 0x1b, 0x0a, 0x09, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x32, 0xe8, 0x01,
	0x0a, 0x06, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x4c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f,
	0x67, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73,
	0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72,
	0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x2e, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x35, 0x0a, 0x07, 0x44, 0x6f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x13, 0x2e, 0x73,
	0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6d,
	0x64, 0x1a, 0x13, 0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6d, 0x64, 0x22, 0x00, 0x42, 0x3d, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x6d, 0x69, 0x6e, 0x64, 0x73, 0x2e, 0x68, 0x61, 0x72, 0x69, 0x78,
	0x2e, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x2e, 0x61, 0x73, 0x72, 0x42, 0x0b, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0xa2, 0x02, 0x03, 0x41, 0x53, 0x52, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_speech_proto_rawDescOnce sync.Once
	file_proto_speech_proto_rawDescData = file_proto_speech_proto_rawDesc
)

func file_proto_speech_proto_rawDescGZIP() []byte {
	file_proto_speech_proto_rawDescOnce.Do(func() {
		file_proto_speech_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_speech_proto_rawDescData)
	})
	return file_proto_speech_proto_rawDescData
}

var file_proto_speech_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_speech_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_speech_proto_goTypes = []interface{}{
	(AsrsLang)(0),               // 0: skill.asr.AsrsLang
	(NullValue)(0),              // 1: skill.asr.NullValue
	(Body_Type)(0),              // 2: skill.asr.Body.Type
	(*Body)(nil),                // 3: skill.asr.Body
	(*RecognitionRequest)(nil),  // 4: skill.asr.RecognitionRequest
	(*RecognitionResponse)(nil), // 5: skill.asr.RecognitionResponse
	(*CheckCmd)(nil),            // 6: skill.asr.CheckCmd
	(*Struct)(nil),              // 7: skill.asr.Struct
	(*CommonReqInfo)(nil),       // 8: skill.asr.CommonReqInfo
	(*CommonRspInfo)(nil),       // 9: skill.asr.CommonRspInfo
	(*Extra)(nil),               // 10: skill.asr.Extra
	(*Value)(nil),               // 11: skill.asr.Value
	(*ListValue)(nil),           // 12: skill.asr.ListValue
	nil,                         // 13: skill.asr.Body.OptionEntry
	(*Body_Data)(nil),           // 14: skill.asr.Body.Data
	nil,                         // 15: skill.asr.Struct.FieldsEntry
}
var file_proto_speech_proto_depIdxs = []int32{
	2,  // 0: skill.asr.Body.type:type_name -> skill.asr.Body.Type
	13, // 1: skill.asr.Body.option:type_name -> skill.asr.Body.OptionEntry
	14, // 2: skill.asr.Body.data:type_name -> skill.asr.Body.Data
	8,  // 3: skill.asr.RecognitionRequest.common_req_info:type_name -> skill.asr.CommonReqInfo
	3,  // 4: skill.asr.RecognitionRequest.body:type_name -> skill.asr.Body
	10, // 5: skill.asr.RecognitionRequest.extra:type_name -> skill.asr.Extra
	9,  // 6: skill.asr.RecognitionResponse.common_rsp_info:type_name -> skill.asr.CommonRspInfo
	7,  // 7: skill.asr.RecognitionResponse.detail_message:type_name -> skill.asr.Struct
	15, // 8: skill.asr.Struct.fields:type_name -> skill.asr.Struct.FieldsEntry
	1,  // 9: skill.asr.Value.null_value:type_name -> skill.asr.NullValue
	7,  // 10: skill.asr.Value.struct_value:type_name -> skill.asr.Struct
	12, // 11: skill.asr.Value.list_value:type_name -> skill.asr.ListValue
	11, // 12: skill.asr.ListValue.values:type_name -> skill.asr.Value
	0,  // 13: skill.asr.Body.Data.mulAsrLang:type_name -> skill.asr.AsrsLang
	11, // 14: skill.asr.Struct.FieldsEntry.value:type_name -> skill.asr.Value
	4,  // 15: skill.asr.Speech.Recognize:input_type -> skill.asr.RecognitionRequest
	4,  // 16: skill.asr.Speech.StreamingRecognize:input_type -> skill.asr.RecognitionRequest
	6,  // 17: skill.asr.Speech.DoCheck:input_type -> skill.asr.CheckCmd
	5,  // 18: skill.asr.Speech.Recognize:output_type -> skill.asr.RecognitionResponse
	5,  // 19: skill.asr.Speech.StreamingRecognize:output_type -> skill.asr.RecognitionResponse
	6,  // 20: skill.asr.Speech.DoCheck:output_type -> skill.asr.CheckCmd
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_speech_proto_init() }
func file_proto_speech_proto_init() {
	if File_proto_speech_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_speech_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecognitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonReqInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonRspInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_speech_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_speech_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*Value_NullValue)(nil),
		(*Value_NumberValue)(nil),
		(*Value_StringValue)(nil),
		(*Value_BoolValue)(nil),
		(*Value_StructValue)(nil),
		(*Value_ListValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_speech_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_speech_proto_goTypes,
		DependencyIndexes: file_proto_speech_proto_depIdxs,
		EnumInfos:         file_proto_speech_proto_enumTypes,
		MessageInfos:      file_proto_speech_proto_msgTypes,
	}.Build()
	File_proto_speech_proto = out.File
	file_proto_speech_proto_rawDesc = nil
	file_proto_speech_proto_goTypes = nil
	file_proto_speech_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SpeechClient is the client API for Speech service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpeechClient interface {
	Recognize(ctx context.Context, in *RecognitionRequest, opts ...grpc.CallOption) (*RecognitionResponse, error)
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (Speech_StreamingRecognizeClient, error)
	DoCheck(ctx context.Context, in *CheckCmd, opts ...grpc.CallOption) (*CheckCmd, error)
}

type speechClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechClient(cc grpc.ClientConnInterface) SpeechClient {
	return &speechClient{cc}
}

func (c *speechClient) Recognize(ctx context.Context, in *RecognitionRequest, opts ...grpc.CallOption) (*RecognitionResponse, error) {
	out := new(RecognitionResponse)
	err := c.cc.Invoke(ctx, "/skill.asr.Speech/Recognize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (Speech_StreamingRecognizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Speech_serviceDesc.Streams[0], "/skill.asr.Speech/StreamingRecognize", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechStreamingRecognizeClient{stream}
	return x, nil
}

type Speech_StreamingRecognizeClient interface {
	Send(*RecognitionRequest) error
	Recv() (*RecognitionResponse, error)
	grpc.ClientStream
}

type speechStreamingRecognizeClient struct {
	grpc.ClientStream
}

func (x *speechStreamingRecognizeClient) Send(m *RecognitionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechStreamingRecognizeClient) Recv() (*RecognitionResponse, error) {
	m := new(RecognitionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *speechClient) DoCheck(ctx context.Context, in *CheckCmd, opts ...grpc.CallOption) (*CheckCmd, error) {
	out := new(CheckCmd)
	err := c.cc.Invoke(ctx, "/skill.asr.Speech/DoCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeechServer is the server API for Speech service.
type SpeechServer interface {
	Recognize(context.Context, *RecognitionRequest) (*RecognitionResponse, error)
	StreamingRecognize(Speech_StreamingRecognizeServer) error
	DoCheck(context.Context, *CheckCmd) (*CheckCmd, error)
}

// UnimplementedSpeechServer can be embedded to have forward compatible implementations.
type UnimplementedSpeechServer struct {
}

func (*UnimplementedSpeechServer) Recognize(context.Context, *RecognitionRequest) (*RecognitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (*UnimplementedSpeechServer) StreamingRecognize(Speech_StreamingRecognizeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRecognize not implemented")
}
func (*UnimplementedSpeechServer) DoCheck(context.Context, *CheckCmd) (*CheckCmd, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCheck not implemented")
}

func RegisterSpeechServer(s *grpc.Server, srv SpeechServer) {
	s.RegisterService(&_Speech_serviceDesc, srv)
}

func _Speech_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skill.asr.Speech/Recognize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServer).Recognize(ctx, req.(*RecognitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speech_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechServer).StreamingRecognize(&speechStreamingRecognizeServer{stream})
}

type Speech_StreamingRecognizeServer interface {
	Send(*RecognitionResponse) error
	Recv() (*RecognitionRequest, error)
	grpc.ServerStream
}

type speechStreamingRecognizeServer struct {
	grpc.ServerStream
}

func (x *speechStreamingRecognizeServer) Send(m *RecognitionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechStreamingRecognizeServer) Recv() (*RecognitionRequest, error) {
	m := new(RecognitionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Speech_DoCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServer).DoCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/skill.asr.Speech/DoCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServer).DoCheck(ctx, req.(*CheckCmd))
	}
	return interceptor(ctx, in, info, handler)
}

var _Speech_serviceDesc = grpc.ServiceDesc{
	ServiceName: "skill.asr.Speech",
	HandlerType: (*SpeechServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _Speech_Recognize_Handler,
		},
		{
			MethodName: "DoCheck",
			Handler:    _Speech_DoCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _Speech_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/speech.proto",
}
